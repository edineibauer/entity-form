var entity = {};
var dicionarios = {};
var defaults = {};

post("entity-form", "load/metadados", function (data) {
    dicionarios = data;

    $.each(dicionarios, function (i, e) {
        cloneTo("#tpl-entity", "#entity-space", i, true);
    });
});

post("entity-form", "load/defaults", function (data) {
    defaults = data;
});

function entityReset() {
    entity = {
        "name": "",
        "identificador": 0,
        "edit": null
    };
}

entityReset();

function entityEdit(id) {
    entityReset();

    if (typeof(id) !== "undefined") {
        entity.name = id;

        $.each(dicionarios[id], function (i, column) {
            if (i > entity.identificador) entity.identificador = i;
        });
        entity.identificador++;
    }

    showEntity();
}

function showEntity() {
    $("#entityName").val(entity.name).focus();

    $("#entityAttr").html("");
    $.each(dicionarios[entity.name], function (i, column) {
        cloneTo("#tpl-attrEntity", "#entityAttr", [i, column.column], true);
    });
}

function editAttr(id) {
    if(id !== entity.edit) {
        checkSaveAttr();
        entity.edit = typeof(id) !== "undefined" ? id : null;

        $(".selectInput").css("color", "#CCCCCC").val("");
        $("#format-source").addClass("hide");
        $("#allowBtnAdd, #spaceValueAllow").removeClass("hide");
        $("#spaceValueAllow").html("");
        applyAttr(getDefaultsInfo());
    }
}

function checkSaveAttr() {
    if (getType() !== "" && $("#nome").val().length > 2)
        saveAttr();
}

function saveAttr() {
    if (entity.edit === null) {
        if (entity.name === "") {
            entity.name = $("#entityName").val();
            dicionarios[entity.name] = {};
        }
        entity.edit = entity.identificador;
        entity.identificador++;
    }
    saveAttrInputs();
    showEntity();
}

function saveAttrInputs() {
    dicionarios[entity.name][entity.edit] = assignObject(defaults.default, defaults[getType()]);

    $.each($(".input"), function () {
        if (!$(this).hasClass("hide"))
            saveAttrValue($(this));
    });

    if ($("#spaceValueAllow").html() !== "") {
        dicionarios[entity.name][entity.edit]['allow']['values'] = [];
        dicionarios[entity.name][entity.edit]['allow']['names'] = [];
        $.each($("#spaceValueAllow").find(".allow"), function () {
            saveAllowValue($(this));
        });
    }
}

function saveAttrValue($input) {
    var name = $input.attr("id");
    if (name === "nome")
        dicionarios[entity.name][entity.edit]['column'] = slug($input.val(), "_");

    if (["default", "size"].indexOf(name) > -1 && !$("#" + name + "_custom").prop("checked"))
        dicionarios[entity.name][entity.edit][name] = false;
    else
        dicionarios[entity.name][entity.edit][name] = ($input.attr("type") === "checkbox" ? $input.prop("checked") : $input.val());
}

function saveAllowValue($input) {
    if ($input.find(".values").val() !== "") {
        dicionarios[entity.name][entity.edit]['allow']['values'].push($input.find(".values").val());
        dicionarios[entity.name][entity.edit]['allow']['names'].push($input.find(".names").val());
    }
}

function applyAttr(data) {
    if (typeof (data) !== "undefined" && data !== null) {
        $.each(data, function (name, value) {
            if (typeof(value) === "object")
                applyAttr(value);

            applyValueAttr(name, value);
        });
    }
}

function applyValueAttr(name, value) {
    var $input = $("#" + name);

    if (name === "values" || name === "names") {
        setAllow(name, value);
    } else {
        if ($input.attr("type") === "checkbox" && ((value !== false && !$input.prop("checked")) || (value === false && $input.prop("checked"))))
            $input.trigger("click");
        else
            checkValuesEspAttr(name, value);
    }
}

function checkValuesEspAttr(name, value) {
    if ((name === "default" || name === "size")) {
        if ((value !== false && !$("#" + name + "_custom").prop("checked")) || (value === false && $("#" + name + "_custom").prop("checked"))) {
            $("#" + name + "_custom").trigger("click");
        }
        $("#" + name).val(value !== false ? value : "");
    } else if (name === "format") {
        setFormat(value);
    } else {
        $("#" + name).val(value);
    }
}

function setAllow(name, value) {
    var copy = $("#spaceValueAllow").html() === "";
    var total = value.length - 1;
    $.each(value, function (i, e) {
        if (copy) cloneTo('#tplValueAllow', '#spaceValueAllow', '', 'append');
        var $allow = (copy ? $("#spaceValueAllow").find(".allow:last-child") : $("#spaceValueAllow").find(".allow:eq(" + i + ")"));
        $allow.find("." + name).val(e);
    });
}

function setFormat(val) {
    $(".selectInput").css("color", "#CCCCCC").val("");
    getSelectInput(val).css("color", "#333333").val(val);

    if (val === "source") {
        $("#format-source").removeClass("hide");
        $("#allowBtnAdd, #spaceValueAllow").addClass("hide");
    } else {
        $("#format-source").addClass("hide");
        $("#allowBtnAdd, #spaceValueAllow").removeClass("hide");
    }

    $(".requireName, #nomeAttr").removeClass("hide");
    $("#nome").focus();
}

function getSelectInput(val) {
    if (["text", "textarea", "int", "float", "boolean", "select", "radio", "checkbox", "range", "color", "source"].indexOf(val) > -1)
        return $("#funcaoPrimary");
    else if (["extend", "extend_mult", "list", "list_mult"].indexOf(val) > -1)
        return $("#funcaoRelation");
    else
        return $("#funcaoIdentifier");
}

/*

SLIDE

function changeLeftRange($this) {
    var value = Math.pow(2, parseInt($this.val()));
    var left = ((((parseInt($this.val()) * 100) / parseInt($this.attr("max"))) * ($this.width() - 27)) / 100);
    left += (value < 10 ? 9 : (value < 100 ? 5 : (value < 1000 ? 1 : (value < 10000 ? -3 : (value < 100000 ? -7 : (value < 1000000 ? -11 : -15))))));
    $this.siblings(".tempRangeInfo").css("left", left + "px").text(value);
}

*/

$("input[type=range]").mousedown(function () {
    changeLeftRange($(this));
    $(this).mousemove(function () {
        changeLeftRange($(this));
    });
}).mouseup(function () {
    $(this).off("mousemove");
}).change(function () {
    changeLeftRange($(this));
});

/* EVENTS */

$("#entityName").on("keyup change focus", function () {
    if ($(this).val().length > 2)
        $("#requireNameEntity").removeClass("hide");
    else
        $("#requireNameEntity").addClass("hide");
});

$(".selectInput").change(function () {
    setFormat($(this).val());
    applyAttr(assignObject(defaults.default, defaults[getType()]));
});

$("#nome").on("keyup change", function () {
    if ($("#nome").val().length > 1)
        $(".requireName").removeClass("hide");
    else
        $(".requireName").addClass("hide");
});

$("#default_custom").change(function () {
    if ($(this).is(":checked")) {
        $("#default_container").removeClass("hide");
        $("#default").focus();
        if ($("#unique").is(":checked"))
            $("#unique").trigger("click");
    } else {
        $("#default_container").addClass("hide");
    }
});

$("#size_custom").change(function () {
    if ($(this).is(":checked")) {
        $("#size_container").removeClass("hide");
        $("#size").focus();
    } else {
        $("#size_container").addClass("hide");
    }
});

$("#unique").change(function () {
    if ($(this).is(":checked") && $("#default_custom").is(":checked")) $("#default_custom").trigger("click");
});

$("#form").change(function () {
    if ($(this).is(":checked"))
        $(".form_body").removeClass("hide");
    else
        $(".form_body").addClass("hide");
});

$(".file-format").change(function () {
    if ($(this).is(":checked")) $("#formato-" + $(this).attr("id")).removeClass("hide");
    else $("#formato-" + $(this).attr("id")).addClass("hide");
});

$(".allformat").change(function () {
    $("." + $(this).attr("rel") + "-format").prop("checked", $(this).is(":checked"));
});

$(".oneformat").change(function () {
    if (!$(this).is(":checked")) {
        $("#all-" + $(this).attr("rel")).prop("checked", false);
    } else {
        var all = true;
        $.each($("." + $(this).attr("rel") + "-format"), function () {
            if (all && !$(this).is(":checked")) all = false;
        });
        $("#all-" + $(this).attr("rel")).prop("checked", all);
    }
});

$("#colm").change(function () {
    var $coll = $("#coll");
    var $cols = $("#cols");
    var value = parseInt($(this).val());
    if (parseInt($coll.val()) > value) {
        $coll.find("option").removeAttr("selected");
        $coll.find("option[value=" + $(this).val() + "]").attr("selected", "selected");
    }
    if (parseInt($cols.val()) < value) {
        $cols.find("option").removeAttr("selected");
        $cols.find("option[value=" + $(this).val() + "]").attr("selected", "selected");
    }
});

function getDefaultsInfo() {
    var type = getType();

    if (entity.edit !== null)
        return assignObject(defaults.default, dicionarios[entity.name][entity.edit]);
    else if (type !== "")
        return assignObject(defaults.default, defaults[getType()]);
    else
        return assignObject(defaults.default, {});
}

function assignObject(ob1, ob2) {
    var t = typeof(ob1) === "object" ? JSON.parse(JSON.stringify(ob1)) : {};
    $.each(ob2, function (name, value) {
        if (typeof(value) === "object")
            t[name] = assignObject(t[name], value);
        else
            t[name] = value;
    });
    return t;
}

function getType() {
    var result = "";
    $(".selectInput").each(function () {
        if ($(this).val() !== null) result = $(this).val();
    });
    return result;
}

function attrSave() {

    $("#saveAttrBtn").panel(themeToast("Salvo"));
    var data = {};
    $(".selectInput").each(function () {
        if ($(this).val() !== null) data['tipo'] = $(this).val();
    });
    if (typeof (data['tipo']) !== "undefined" && $("#nome").val().length > 0) {
        data['nome'] = $("#nome").val();
        data['unique'] = $("#unique").is(":checked");
        data['update'] = $("#update").is(":checked");
        data['null'] = $("#default_custom").is(":checked");
        data['size'] = $("#size_custom").is(":checked") ? $("#size").val() : false;
        data['default'] = data['null'] ? $("#default").val() : false;
        data['form'] = $("#form").is(":checked") ? {} : false;
        if (data['form']) {
            data['form']['class'] = $("#class").val();
            data['form']['style'] = $("#style").val();
            data['form']['cols'] = $("#cols").val();
            data['form']['colm'] = $("#colm").val();
            data['form']['coll'] = $("#coll").val();
        }
        data['allow'] = {};
        data['allow']['regex'] = $("#regular").val();
        data['allow']['values'] = [];
        data['allow']['names'] = [];

        if (data['tipo'] === "source") {
            $(".file-format").each(function () {
                if ($(this).is(":checked")) {
                    var id = $(this).attr("id");
                    $("." + id + "-format").each(function () {
                        if ($(this).is(":checked")) data['allow']['values'].push($(this).attr("id"));
                    });

                }
            });
        } else {
            $("#spaceValueAllow").find(".allow").each(function () {
                var v = $(this).find("#allow").val();
                if (v.length > 0) {
                    data['allow']['values'].push(v);
                    var n = $(this).find("#allowRelated").val();
                    data['allow']['names'].push(n.length > 0 ? n : v);
                }
            });
        }

        $.post(HOME + "request/post", {
            lib: 'entity-form',
            file: 'saveEntityMetadados',
            entity: $("#entityName").val(),
            data: data,
            key: "1Jgb6!pYd0Sk]r-G(xZ3zoZt(.W8-"
        }, function (g) {
            switch (g) {
                case '1':
                    //success
                    break;
                case '2':
                    //error
                    break;
                default:
                    //desconhecido
                    console.log(g);
            }
        }, 'json');
    }
}