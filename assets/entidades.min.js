var entity = {};
var dicionarios = {};
var defaults = {};

post("entity-form", "load/metadados", function (data) {
    dicionarios = data;
    console.log(dicionarios);

    $.each(dicionarios, function (i, e) {
        cloneTo("#tpl-entity", "#entity-space", i, true);
    });
});

post("entity-form", "load/defaults", function (data) {
    defaults = data;
});

function entityReset() {
    entity = {
        "name": "",
        "storage": "",
        "identificador": 0,
        "columns": [],
        "attrs": {
            "storage": {},
            "created": [],
            "updated": [],
            "deleted": []
        },
        "created": false
    };
}

entityReset();

function loadColumn(dados) {
    columns = [];
    if (typeof(dados) !== "undefined") {
        $.each(dados, function (i, dado) {
            if (identificador < i) identificador = i;
            columns.push(dado);
        });
    }
}

function addColumn(column) {

}

function entityEdit(id) {
    entityReset();

    if (typeof(id) !== "undefined") {
        entity.name = id;

        $.post(HOME + 'request/post', {file: 'readEntity', lib: 'entity-form', entity: id}, function (columns) {
            entity.storage = columns;
            $.each(entity.storage, function (i, column) {
                if (i > entity.identificador) entity.identificador = i;
                entity.columns.push(column.column);
            });
            entity.identificador++;
            showEntity();
        }, "json");

    } else {
        showEntity();
    }
}

function showEntity() {
    if ($("#entityName").val() !== entity.name) {
        $("#entityName").val(entity.name).focus();

        $("#entityAttr").html("");
        $.each(entity.columns, function (i, column) {
            cloneTo("#tpl-attrEntity", "#entityAttr", [i, column], true);
        });

        setAttrValueDefault();
    }
}

function editAttr(id) {
    if(typeof(id) !== "undefined")
        setValuesAttr(dicionarios[entity.name][id]);
}

function getName($input) {
    if($input.hasClass("selectInput")) {
        return "format";
    } else {
        switch ($input.attr("id")) {
            case "null":
                return "default";
                break;
            case "size_custom":
                return "size";
                break;
            case "show_ui":
                return "form";
                break;
            default:
                return $input.attr("id");
        }
    }
}

function setValuesAttr(data) {
    if(typeof (data) !== "undefined") {
        $.each($(".input"), function (i, input) {
            var $input = $(input);
            var val = data[getName($input)];

            if (["null", "size_custom", "unique", "update", "show_ui"].indexOf($input.attr("id")) > -1 && val !== undefined && ((val !== false && !$input.prop("checked")) || (val === false && $input.prop("checked"))))
                $input.trigger("click");
            else
                $input.val(val !== undefined ? val : "");

            if (["size_custom", "size"].indexOf($input.attr("id")) > -1)
                $input.trigger("change");
        });
    }
}

function setAttrValueDefault() {
    $.each($(".input"), function (i, input) {
        var $input = $(input);
        var name = ($input.attr("id") === "null" ? "default" : ($input.attr("id") === "size_custom" ? "size" : $input.attr("id")));
        var val = defaults[name];

        if (["null", "size_custom", "unique", "update", "show_ui"].indexOf($input.attr("id")) > -1 && val !== undefined && ((val !== false && !$input.prop("checked")) || (val === false && $input.prop("checked")))) $input.trigger("click");
        else $input.val(val !== undefined ? val : "");
        if (["size_custom", "size"].indexOf($input.attr("id")) > -1) $input.trigger("change");
    });

}

function changeLeftRange($this) {
    var value = Math.pow(2, parseInt($this.val()));
    var left = ((((parseInt($this.val()) * 100) / parseInt($this.attr("max"))) * ($this.width() - 27)) / 100);
    left += (value < 10 ? 9 : (value < 100 ? 5 : (value < 1000 ? 1 : (value < 10000 ? -3 : (value < 100000 ? -7 : (value < 1000000 ? -11 : -15))))));
    $this.siblings(".tempRangeInfo").css("left", left + "px").text(value);
}

function regexTpl(v) {
    return new RegExp('{{\\s*\\$' + v + '\\s*}}', 'g');
}

function tplObject(obj, $elem, prefix) {
    prefix = typeof (prefix) === "undefined" ? "" : prefix;
    if (typeof (obj) === "object") {
        $.each(obj, function (key, value) {
            if (obj instanceof Array) $elem = tplObject(value, $elem, prefix + key);
            else $elem = typeof (value) === "object" ? tplObject(value, $elem, prefix + key + ".") : $elem.replace(regexTpl(prefix + key), value);
        });
    } else {
        $elem = $elem.replace(regexTpl(prefix), obj);
    }

    return $elem;
}

$("input[type=range]").mousedown(function () {
    changeLeftRange($(this));
    $(this).mousemove(function () {
        changeLeftRange($(this));
    });
}).mouseup(function () {
    $(this).off("mousemove");
}).change(function () {
    changeLeftRange($(this));
});

/* EVENTS */
$(".selectInput").change(function () {
    var val = $(this).val();
    $(".selectInput").css("color", "#CCCCCC").val("");
    $(this).css("color", "#333333").val(val);

    if (val === "source") {
        $("#format-source").removeClass("hide");
        $("#allowBtnAdd, #spaceValueAllow").addClass("hide");
    } else {
        $("#format-source").addClass("hide");
        $("#allowBtnAdd, #spaceValueAllow").removeClass("hide");
    }

    setValuesAttr(getDefaults());
    $("#nome").trigger("change").focus();
    $("#nomeAttr").removeClass("hide");
});

$("#nome").on("keyup change", function () {
    if ($("#nome").val().length > 1)
        $(".requireName").removeClass("hide");
    else
        $(".requireName").addClass("hide");
});

$("#null").change(function () {
    if ($(this).is(":checked") && $("#unique").is(":checked")) $("#unique").trigger("click");
    $("#default-container").css("display", ($(this).is(":checked") ? "inline" : "none"));
    $("#default").focus();
});

$("#size_custom").change(function () {
    $("#size-container").css("visibility", ($(this).is(":checked") ? "visible" : "hidden"));
    $("#size").focus();
});

$("#unique").change(function () {
    if ($(this).is(":checked") && $("#null").is(":checked")) $("#null").trigger("click");
});

$(".legendSwitch input[type=checkbox]").change(function () {
    if ($(this).is(":checked")) $(".legendSwitch").siblings().css("display", "inline");
    else $(".legendSwitch").siblings().css("display", "none");
});

$(".file-format").change(function () {
    if ($(this).is(":checked")) $("#formato-" + $(this).attr("id")).removeClass("hide");
    else $("#formato-" + $(this).attr("id")).addClass("hide");
});

$("#show_ui").change(function () {
    if ($(this).is(":checked")) $("#show_ui_body").removeClass("hide");
    else $("#show_ui_body").addClass("hide");
});

$(".allformat").change(function () {
    $("." + $(this).attr("rel") + "-format").prop("checked", $(this).is(":checked"));
});

$(".oneformat").change(function () {
    if (!$(this).is(":checked")) {
        $("#all-" + $(this).attr("rel")).prop("checked", false);
    } else {
        var all = true;
        $.each($("." + $(this).attr("rel") + "-format"), function () {
            if (all && !$(this).is(":checked")) all = false;
        });
        $("#all-" + $(this).attr("rel")).prop("checked", all);
    }
});

$("#colm").change(function () {
    var $coll = $("#coll");
    var $cols = $("#cols");
    var value = parseInt($(this).val());
    if (parseInt($coll.val()) > value) {
        $coll.find("option").removeAttr("selected");
        $coll.find("option[value=" + $(this).val() + "]").attr("selected", "selected");
    }
    if (parseInt($cols.val()) < value) {
        $cols.find("option").removeAttr("selected");
        $cols.find("option[value=" + $(this).val() + "]").attr("selected", "selected");
    }
});

function getDefaults() {
    var type = getType();
    if(typeof (type) !== "undefined")
        return Object.assign({}, defaults['default'], defaults[type]);
}

function getType() {
    var result = "";
    $(".selectInput").each(function () {
        if ($(this).val() !== null) result = $(this).val();
    });
    return result;
}

function attrSave() {

    $("#saveAttrBtn").panel(themeToast("Salvo"));
    var data = {};
    $(".selectInput").each(function () {
        if ($(this).val() !== null) data['tipo'] = $(this).val();
    });
    if (typeof (data['tipo']) !== "undefined" && $("#nome").val().length > 0) {
        data['nome'] = $("#nome").val();
        data['unique'] = $("#unique").is(":checked");
        data['update'] = $("#update").is(":checked");
        data['null'] = $("#null").is(":checked");
        data['size'] = $("#size_custom").is(":checked") ? $("#size").val() : false;
        data['default'] = data['null'] ? $("#default").val() : false;
        data['form'] = $("#show_ui").is(":checked") ? {} : false;
        if (data['form']) {
            data['form']['class'] = $("#class").val();
            data['form']['style'] = $("#style").val();
            data['form']['cols'] = $("#cols").val();
            data['form']['colm'] = $("#colm").val();
            data['form']['coll'] = $("#coll").val();
        }
        data['allow'] = {};
        data['allow']['regex'] = $("#regular").val();
        data['allow']['values'] = [];
        data['allow']['names'] = [];

        if (data['tipo'] === "source") {
            $(".file-format").each(function () {
                if ($(this).is(":checked")) {
                    var id = $(this).attr("id");
                    $("." + id + "-format").each(function () {
                        if ($(this).is(":checked")) data['allow']['values'].push($(this).attr("id"));
                    });

                }
            });
        } else {
            $("#spaceValueAllow").find(".allow").each(function () {
                var v = $(this).find("#allow").val();
                if (v.length > 0) {
                    data['allow']['values'].push(v);
                    var n = $(this).find("#allowRelated").val();
                    data['allow']['names'].push(n.length > 0 ? n : v);
                }
            });
        }

        $.post(HOME + "request/post", {
            lib: 'entity-form',
            file: 'saveEntityMetadados',
            entity: $("#entityName").val(),
            data: data,
            key: "1Jgb6!pYd0Sk]r-G(xZ3zoZt(.W8-"
        }, function (g) {
            switch (g) {
                case '1':
                    //success
                    break;
                case '2':
                    //error
                    break;
                default:
                    //desconhecido
                    console.log(g);
            }
        }, 'json');
    }
}

/*
function loadAtributo(attr) {

    $scope.attr = (typeof(attr) === 'undefined' ? {} : attr);

    $.each(["title", "column", "type", "size", "allow", "allowRelation", "default"], function (i, e) {
        if (!(e in $scope.attr)) $scope.attr[e] = "";
    });

    $scope.attr["null"] = "null" in $scope.attr ? $scope.attr['null'] : true;
    $scope.attr["unique"] = "unique" in $scope.attr ? $scope.attr['unique'] : false;
    $scope.attr["indice"] = "indice" in $scope.attr ? $scope.attr['indice'] : false;
    $scope.attr["update"] = "update" in $scope.attr ? $scope.attr['update'] : true;
    $scope.attr["edit"] = "edit" in $scope.attr ? $scope.attr['edit'] : true;
    $scope.attr["list"] = "list" in $scope.attr ? $scope.attr['list'] : true;
    $scope.attr["table"] = "table" in $scope.attr ? $scope.attr['table'] : "";
    $scope.attr["col"] = "col" in $scope.attr ? $scope.attr['col'] : "";
    $scope.attr["class"] = "class" in $scope.attr ? $scope.attr['class'] : "";
    $scope.attr["style"] = "style" in $scope.attr ? $scope.attr['style'] : "";
    $scope.attr["regular"] = "regular" in $scope.attr ? $scope.attr['regular'] : "";

    setTimeout(function () {
        $('select').material_select();
        $scope.$apply();
    }, 1);
}

var app = angular.module('entity-form', []);
app.controller('entity-controller', function ($scope) {

    Array.prototype.move = function (old_index, new_index) {
        if (new_index >= this.length) {
            var k = new_index - this.length;
            while ((k--) + 1) {
                this.push(undefined);
            }
        }
        this.splice(new_index, 0, this.splice(old_index, 1)[0]);
        return this; // for testing purposes
    };

    $scope.attrFullFieldsRequireds = function () {
        return (!(($scope.attr.type === 'list' || $scope.attr.type === 'extend' || $scope.attr.type === 'extend_mult' || $scope.attr.type === 'list_mult') && !$scope.attr.table) && $scope.attr.type && $scope.attr.title);
    };

    var editando = "";
    var identificador = 0;
    $scope.entityList = [];
    var attrCriadas = [];
    var attrDeletadas = [];
    var attrModificadas = [];

    $scope.cond = null;

    $scope.metadados = {};


    function notExistSameNome() {
        var result = true;
        $.each($scope.listAttr, function (i, attr) {
            $.each($scope.listAttr, function (e, attr2) {
                if (i !== e && attr.column === attr2.column) {
                    result = false;
                    return false;
                }
            });
        });

        return result;
    }

    function checkIdFirst() {
        var haveId = false;
        $.each($scope.listAttr, function (i, dado) {
            if (dado.type === 'pri') {
                haveId = true;
                if (i > 0) {
                    for (var e = i; e > 0; e--) {
                        $scope.upAttr(dado);
                    }

                    Materialize.toast("Chave Primária movida para inicio", 3000);
                }
            }
        });

        if (!haveId) {
            Materialize.toast("entidade sem Chave Primária não pode ser Editada!", 5000);
        }
    }

    $scope.editEntity = function (id) {
        var id = typeof(id) === "undefined" ? "" : id;
        $scope.entity.title = id;
        $scope.entity.slug = id;
        identificador = 0;
        attrCriadas = [];
        attrModificadas = [];
        attrDeletadas = [];

        if (id !== "") {
            editando = id;
            $.post(HOME + 'request/post', {file: 'readEntity', lib: 'entity-form', entidade: id}, function (g) {
                $scope.listAttr = [];
                var dados = fixValuesAttr($.parseJSON(g));
                $.each(dados, function (i, dado) {
                    identificador = identificador < dado.identificador ? dado.identificador : identificador;
                    $scope.listAttr.push(dado);
                });
                identificador++;
                $scope.loadAtributo();
                setTimeout(function () {
                    $scope.$apply();
                }, 1);
            });
        } else {
            editando = "";
            $("#entity").focus();
            $scope.listAttr = [];
            $scope.loadAtributo();
            setTimeout(function () {
                $scope.$apply();
            }, 1);
        }
    };

    $scope.editAttr = function (attr) {
        if ($scope.attrFullFieldsRequireds()) {
            $scope.addAttr();
        }
        $scope.loadAtributo(attr);
    };

    $scope.addAttr = function () {
        if ($scope.attrFullFieldsRequireds()) {
            if (typeof($scope.attr.identificador) === 'undefined') {

                $scope.attr.identificador = identificador;
                identificador++;
                $scope.listAttr.push($scope.attr);
                attrCriadas.push($scope.attr.identificador);

            } else {

                var notInMod = contain($scope.attr.identificador, attrModificadas) === -1;
                var notInDel = contain($scope.attr.identificador, attrDeletadas) === -1;
                var notInAdd = contain($scope.attr.identificador, attrCriadas) === -1;
                if (notInMod && notInDel && notInAdd) {
                    attrModificadas.push($scope.attr.identificador);
                }
            }

            $scope.loadAtributo();
        }
    };

    $scope.createEntity = function () {
        if ($scope.entity.title && $scope.listAttr.length > 1) {
            $scope.addAttr();
            if (notExistSameNome()) {
                checkIdFirst();

                $.post(HOME + "request/post", {
                    lib: "entity-form",
                    file: "createEntity",
                    dados: $scope.listAttr,
                    entity: $scope.entity.slug,
                    edit: editando,
                    add: attrCriadas,
                    mod: attrModificadas,
                    del: attrDeletadas
                }, function (g) {
                    if (g) {
                        Materialize.toast(g, 3000);
                    } else {
                        $scope.readEntity();
                        Materialize.toast('Entidade Salva!', 2500);
                        attrCriadas = [];
                        attrModificadas = [];
                        attrDeletadas = [];
                    }
                });
            } else {
                Materialize.toast("Nomes de atributos repetidos!", 3000);
            }
        }
    };

    $scope.removeEntity = function () {
        if (confirm("Deletar entidade e dados?")) {
            if ($scope.entity.slug && $scope.listAttr.length > 1) {
                $.post(HOME + "request/post", {
                    lib: "entity-form",
                    file: "deleteEntity",
                    entity: $scope.entity.slug
                }, function (g) {
                    if (g) {
                        Materialize.toast(g, 3000);
                    } else {
                        $scope.readEntity();
                        $scope.editEntity();
                        $scope.loadAtributo();
                        Materialize.toast('Entidade Removida!', 2500);
                    }
                });
            }
        }
    };

    $scope.deleteAttr = function () {
        if (confirm("Remover atributo?")) {
            var indice = $scope.listAttr.indexOf($scope.attr);

            if (indice > -1) {
                $scope.listAttr.splice(indice, 1);

                var add = contain($scope.attr.identificador, attrCriadas);
                if (add > -1) {
                    attrCriadas.splice(add, 1);
                } else {
                    var mod = contain($scope.attr.identificador, attrModificadas);
                    if (mod > -1) {
                        attrModificadas.splice(mod, 1);
                    }
                    attrDeletadas.push($scope.attr.identificador);
                }

                Materialize.toast("Atributo Removido", 2500);
                $scope.loadAtributo();
            }
        }
    };

    $scope.downAttr = function (id) {
        var oldPosition = $scope.listAttr.indexOf(id);
        var newPosition = oldPosition + (oldPosition < $scope.listAttr.length ? 1 : 0);
        $scope.listAttr.move(oldPosition, newPosition);
    };

    $scope.upAttr = function (id) {
        var oldPosition = $scope.listAttr.indexOf(id);
        var newPosition = oldPosition - (oldPosition > 0 ? 1 : 0);
        $scope.listAttr.move(oldPosition, newPosition);
    };

    $scope.loadMetadados = function () {
        $.post(HOME + "request/post", {
            lib: "entity-form",
            file: "metadadosLoad"
        }, function (g) {
            if (g) {
                $scope.metadados = $.parseJSON(g);
                console.log($scope.metadados);
            }
        });
    };

    $scope.$scope.defaultValues = function () {
        $scope.entity = {
            "title": "",
            "slug": ""
        };
        listAttr = [];

        setTimeout(function () {
            $scope.$apply();
        }, 1);
    };





    $scope.$watch('attr.title', function (newNames, oldNames) {
        if (typeof(newNames) !== 'undefined') {
            $scope.attr.column = slug(newNames, "_");
            setTimeout(function () {
                Materialize.updateTextFields();
            }, 1);
        }
    });

    $scope.$watch('entity.title', function (newNames, oldNames) {
        if (typeof(newNames) !== 'undefined') {
            $scope.entity.slug = slug(newNames, "_");
            setTimeout(function () {
                Materialize.updateTextFields();
            }, 1);
        }
    });

    $scope.$watch('attr.type', function (newValue, oldNames) {
        if (newValue) {
            $scope.attr = funcaoValuesEntity(newValue, $scope.attr);
            setTimeout(function () {
                Materialize.updateTextFields();
                $("#nome").focus();
            }, 1);
        }
    });

    $scope.$watch('attr.type', function (newValue, oldNames) {
        if (newValue) {
            $scope.cond.selectFuncao = true;
        }
    });

    $scope.$watch('attr.unique', function (newValue, oldNames) {
        if (newValue) {
            $scope.attr.null = false;
        }
    });


    $scope.loadMetadados();
    $scope.loadAtributo();
    $scope.defaultValues();
    $scope.readEntity();
    $scope.editEntity();

});

*/